/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * FAST_BUFFERS_LICENSE file included in this Fast Buffers distribution.
 *
 *************************************************************************
 * 
 * @file JointTrajectory.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastbuffers.
 */

#ifndef _JointTrajectory_H_
#define _JointTrajectory_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

namespace eprosima
{
    namespace fastcdr
    {
        class FastCdr;
    }
}
/*!
 * @brief This class represents the structure duration defined by the user in the IDL file.
 * @ingroup JOINTTRAJECTORY
 */
class eProsima_user_DllExport duration
{
public:

    /*!
     * @brief Default constructor.
     */
    duration();
    
    /*!
     * @brief Default destructor.
     */
    ~duration();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object duration that will be copied.
     */
    duration(const duration &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object duration that will be copied.
     */
    duration(duration &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object duration that will be copied.
     */
    duration& operator=(const duration &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object duration that will be copied.
     */
    duration& operator=(duration &&x);
    
    /*!
     * @brief This function sets a value in member sec
     * @param _sec New value for member sec
     */
    inline void sec(int32_t _sec)
    {
        m_sec = _sec;
    }

    /*!
     * @brief This function returns the value of member sec
     * @return Value of member sec
     */
    inline int32_t sec() const
    {
        return m_sec;
    }

    /*!
     * @brief This function returns a reference to member sec
     * @return Reference to member sec
     */
    inline int32_t& sec()
    {
        return m_sec;
    }
    /*!
     * @brief This function sets a value in member nsec
     * @param _nsec New value for member nsec
     */
    inline void nsec(int32_t _nsec)
    {
        m_nsec = _nsec;
    }

    /*!
     * @brief This function returns the value of member nsec
     * @return Value of member nsec
     */
    inline int32_t nsec() const
    {
        return m_nsec;
    }

    /*!
     * @brief This function returns a reference to member nsec
     * @return Reference to member nsec
     */
    inline int32_t& nsec()
    {
        return m_nsec;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using FastCDR serialization.
     * @param cdr FastCDR serialization object.
     */
    void serialize(eprosima::fastcdr::FastCdr &cdr) const;

    /*!
     * @brief This function deserializes an object using FastCDR serialization.
     * @param cdr FastCDR serialization object.
     */
    void deserialize(eprosima::fastcdr::FastCdr &cdr);
    
private:
    int32_t m_sec;
    int32_t m_nsec;
};
/*!
 * @brief This class represents the structure JointTrajectoryPoint defined by the user in the IDL file.
 * @ingroup JOINTTRAJECTORY
 */
class eProsima_user_DllExport JointTrajectoryPoint
{
public:

    /*!
     * @brief Default constructor.
     */
    JointTrajectoryPoint();
    
    /*!
     * @brief Default destructor.
     */
    ~JointTrajectoryPoint();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object JointTrajectoryPoint that will be copied.
     */
    JointTrajectoryPoint(const JointTrajectoryPoint &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object JointTrajectoryPoint that will be copied.
     */
    JointTrajectoryPoint(JointTrajectoryPoint &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object JointTrajectoryPoint that will be copied.
     */
    JointTrajectoryPoint& operator=(const JointTrajectoryPoint &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object JointTrajectoryPoint that will be copied.
     */
    JointTrajectoryPoint& operator=(JointTrajectoryPoint &&x);
    
    /*!
     * @brief This function copies the value in member positions
     * @param _positions New value to be copied in member positions
     */
    inline void positions(const std::vector<double> &_positions)
    {
        m_positions = _positions;
    }

    /*!
     * @brief This function moves the value in member positions
     * @param _positions New value to be moved in member positions
     */
    inline void positions(std::vector<double> &&_positions)
    {
        m_positions = std::move(_positions);
    }

    /*!
     * @brief This function returns a constant reference to member positions
     * @return Constant reference to member positions
     */
    inline const std::vector<double>& positions() const
    {
        return m_positions;
    }

    /*!
     * @brief This function returns a reference to member positions
     * @return Reference to member positions
     */
    inline std::vector<double>& positions()
    {
        return m_positions;
    }
    /*!
     * @brief This function copies the value in member velocities
     * @param _velocities New value to be copied in member velocities
     */
    inline void velocities(const std::vector<double> &_velocities)
    {
        m_velocities = _velocities;
    }

    /*!
     * @brief This function moves the value in member velocities
     * @param _velocities New value to be moved in member velocities
     */
    inline void velocities(std::vector<double> &&_velocities)
    {
        m_velocities = std::move(_velocities);
    }

    /*!
     * @brief This function returns a constant reference to member velocities
     * @return Constant reference to member velocities
     */
    inline const std::vector<double>& velocities() const
    {
        return m_velocities;
    }

    /*!
     * @brief This function returns a reference to member velocities
     * @return Reference to member velocities
     */
    inline std::vector<double>& velocities()
    {
        return m_velocities;
    }
    /*!
     * @brief This function copies the value in member accelerations
     * @param _accelerations New value to be copied in member accelerations
     */
    inline void accelerations(const std::vector<double> &_accelerations)
    {
        m_accelerations = _accelerations;
    }

    /*!
     * @brief This function moves the value in member accelerations
     * @param _accelerations New value to be moved in member accelerations
     */
    inline void accelerations(std::vector<double> &&_accelerations)
    {
        m_accelerations = std::move(_accelerations);
    }

    /*!
     * @brief This function returns a constant reference to member accelerations
     * @return Constant reference to member accelerations
     */
    inline const std::vector<double>& accelerations() const
    {
        return m_accelerations;
    }

    /*!
     * @brief This function returns a reference to member accelerations
     * @return Reference to member accelerations
     */
    inline std::vector<double>& accelerations()
    {
        return m_accelerations;
    }
    /*!
     * @brief This function copies the value in member effort
     * @param _effort New value to be copied in member effort
     */
    inline void effort(const std::vector<double> &_effort)
    {
        m_effort = _effort;
    }

    /*!
     * @brief This function moves the value in member effort
     * @param _effort New value to be moved in member effort
     */
    inline void effort(std::vector<double> &&_effort)
    {
        m_effort = std::move(_effort);
    }

    /*!
     * @brief This function returns a constant reference to member effort
     * @return Constant reference to member effort
     */
    inline const std::vector<double>& effort() const
    {
        return m_effort;
    }

    /*!
     * @brief This function returns a reference to member effort
     * @return Reference to member effort
     */
    inline std::vector<double>& effort()
    {
        return m_effort;
    }
    /*!
     * @brief This function copies the value in member time_from_start
     * @param _time_from_start New value to be copied in member time_from_start
     */
    inline void time_from_start(const duration &_time_from_start)
    {
        m_time_from_start = _time_from_start;
    }

    /*!
     * @brief This function moves the value in member time_from_start
     * @param _time_from_start New value to be moved in member time_from_start
     */
    inline void time_from_start(duration &&_time_from_start)
    {
        m_time_from_start = std::move(_time_from_start);
    }

    /*!
     * @brief This function returns a constant reference to member time_from_start
     * @return Constant reference to member time_from_start
     */
    inline const duration& time_from_start() const
    {
        return m_time_from_start;
    }

    /*!
     * @brief This function returns a reference to member time_from_start
     * @return Reference to member time_from_start
     */
    inline duration& time_from_start()
    {
        return m_time_from_start;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using FastCDR serialization.
     * @param cdr FastCDR serialization object.
     */
    void serialize(eprosima::fastcdr::FastCdr &cdr) const;

    /*!
     * @brief This function deserializes an object using FastCDR serialization.
     * @param cdr FastCDR serialization object.
     */
    void deserialize(eprosima::fastcdr::FastCdr &cdr);
    
private:
    std::vector<double> m_positions;
    std::vector<double> m_velocities;
    std::vector<double> m_accelerations;
    std::vector<double> m_effort;
    duration m_time_from_start;
};
/*!
 * @brief This class represents the structure time defined by the user in the IDL file.
 * @ingroup JOINTTRAJECTORY
 */
class eProsima_user_DllExport time
{
public:

    /*!
     * @brief Default constructor.
     */
    time();
    
    /*!
     * @brief Default destructor.
     */
    ~time();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object time that will be copied.
     */
    time(const time &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object time that will be copied.
     */
    time(time &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object time that will be copied.
     */
    time& operator=(const time &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object time that will be copied.
     */
    time& operator=(time &&x);
    
    /*!
     * @brief This function sets a value in member sec
     * @param _sec New value for member sec
     */
    inline void sec(uint32_t _sec)
    {
        m_sec = _sec;
    }

    /*!
     * @brief This function returns the value of member sec
     * @return Value of member sec
     */
    inline uint32_t sec() const
    {
        return m_sec;
    }

    /*!
     * @brief This function returns a reference to member sec
     * @return Reference to member sec
     */
    inline uint32_t& sec()
    {
        return m_sec;
    }
    /*!
     * @brief This function sets a value in member nsec
     * @param _nsec New value for member nsec
     */
    inline void nsec(uint32_t _nsec)
    {
        m_nsec = _nsec;
    }

    /*!
     * @brief This function returns the value of member nsec
     * @return Value of member nsec
     */
    inline uint32_t nsec() const
    {
        return m_nsec;
    }

    /*!
     * @brief This function returns a reference to member nsec
     * @return Reference to member nsec
     */
    inline uint32_t& nsec()
    {
        return m_nsec;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using FastCDR serialization.
     * @param cdr FastCDR serialization object.
     */
    void serialize(eprosima::fastcdr::FastCdr &cdr) const;

    /*!
     * @brief This function deserializes an object using FastCDR serialization.
     * @param cdr FastCDR serialization object.
     */
    void deserialize(eprosima::fastcdr::FastCdr &cdr);
    
private:
    uint32_t m_sec;
    uint32_t m_nsec;
};
/*!
 * @brief This class represents the structure Header defined by the user in the IDL file.
 * @ingroup JOINTTRAJECTORY
 */
class eProsima_user_DllExport Header
{
public:

    /*!
     * @brief Default constructor.
     */
    Header();
    
    /*!
     * @brief Default destructor.
     */
    ~Header();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Header that will be copied.
     */
    Header(const Header &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Header that will be copied.
     */
    Header(Header &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Header that will be copied.
     */
    Header& operator=(const Header &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object Header that will be copied.
     */
    Header& operator=(Header &&x);
    
    /*!
     * @brief This function sets a value in member seq
     * @param _seq New value for member seq
     */
    inline void seq(uint32_t _seq)
    {
        m_seq = _seq;
    }

    /*!
     * @brief This function returns the value of member seq
     * @return Value of member seq
     */
    inline uint32_t seq() const
    {
        return m_seq;
    }

    /*!
     * @brief This function returns a reference to member seq
     * @return Reference to member seq
     */
    inline uint32_t& seq()
    {
        return m_seq;
    }
    /*!
     * @brief This function copies the value in member stamp
     * @param _stamp New value to be copied in member stamp
     */
    inline void stamp(const time &_stamp)
    {
        m_stamp = _stamp;
    }

    /*!
     * @brief This function moves the value in member stamp
     * @param _stamp New value to be moved in member stamp
     */
    inline void stamp(time &&_stamp)
    {
        m_stamp = std::move(_stamp);
    }

    /*!
     * @brief This function returns a constant reference to member stamp
     * @return Constant reference to member stamp
     */
    inline const time& stamp() const
    {
        return m_stamp;
    }

    /*!
     * @brief This function returns a reference to member stamp
     * @return Reference to member stamp
     */
    inline time& stamp()
    {
        return m_stamp;
    }
    /*!
     * @brief This function sets a value in member frame_id
     * @param _frame_id New value for member frame_id
     */
    inline void frame_id(std::string _frame_id)
    {
        m_frame_id = _frame_id;
    }

    /*!
     * @brief This function returns the value of member frame_id
     * @return Value of member frame_id
     */
    inline std::string frame_id() const
    {
        return m_frame_id;
    }

    /*!
     * @brief This function returns a reference to member frame_id
     * @return Reference to member frame_id
     */
    inline std::string& frame_id()
    {
        return m_frame_id;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using FastCDR serialization.
     * @param cdr FastCDR serialization object.
     */
    void serialize(eprosima::fastcdr::FastCdr &cdr) const;

    /*!
     * @brief This function deserializes an object using FastCDR serialization.
     * @param cdr FastCDR serialization object.
     */
    void deserialize(eprosima::fastcdr::FastCdr &cdr);
    
private:
    uint32_t m_seq;
    time m_stamp;
    std::string m_frame_id;
};
/*!
 * @brief This class represents the structure JointTrajectory defined by the user in the IDL file.
 * @ingroup JOINTTRAJECTORY
 */
class eProsima_user_DllExport JointTrajectory
{
public:

    /*!
     * @brief Default constructor.
     */
    JointTrajectory();
    
    /*!
     * @brief Default destructor.
     */
    ~JointTrajectory();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object JointTrajectory that will be copied.
     */
    JointTrajectory(const JointTrajectory &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object JointTrajectory that will be copied.
     */
    JointTrajectory(JointTrajectory &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object JointTrajectory that will be copied.
     */
    JointTrajectory& operator=(const JointTrajectory &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object JointTrajectory that will be copied.
     */
    JointTrajectory& operator=(JointTrajectory &&x);
    
    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    inline void header(const Header &_header)
    {
        m_header = _header;
    }

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    inline void header(Header &&_header)
    {
        m_header = std::move(_header);
    }

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    inline const Header& header() const
    {
        return m_header;
    }

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    inline Header& header()
    {
        return m_header;
    }
    /*!
     * @brief This function copies the value in member joint_names
     * @param _joint_names New value to be copied in member joint_names
     */
    inline void joint_names(const std::vector<std::string> &_joint_names)
    {
        m_joint_names = _joint_names;
    }

    /*!
     * @brief This function moves the value in member joint_names
     * @param _joint_names New value to be moved in member joint_names
     */
    inline void joint_names(std::vector<std::string> &&_joint_names)
    {
        m_joint_names = std::move(_joint_names);
    }

    /*!
     * @brief This function returns a constant reference to member joint_names
     * @return Constant reference to member joint_names
     */
    inline const std::vector<std::string>& joint_names() const
    {
        return m_joint_names;
    }

    /*!
     * @brief This function returns a reference to member joint_names
     * @return Reference to member joint_names
     */
    inline std::vector<std::string>& joint_names()
    {
        return m_joint_names;
    }
    /*!
     * @brief This function copies the value in member points
     * @param _points New value to be copied in member points
     */
    inline void points(const std::vector<JointTrajectoryPoint> &_points)
    {
        m_points = _points;
    }

    /*!
     * @brief This function moves the value in member points
     * @param _points New value to be moved in member points
     */
    inline void points(std::vector<JointTrajectoryPoint> &&_points)
    {
        m_points = std::move(_points);
    }

    /*!
     * @brief This function returns a constant reference to member points
     * @return Constant reference to member points
     */
    inline const std::vector<JointTrajectoryPoint>& points() const
    {
        return m_points;
    }

    /*!
     * @brief This function returns a reference to member points
     * @return Reference to member points
     */
    inline std::vector<JointTrajectoryPoint>& points()
    {
        return m_points;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using FastCDR serialization.
     * @param cdr FastCDR serialization object.
     */
    void serialize(eprosima::fastcdr::FastCdr &cdr) const;

    /*!
     * @brief This function deserializes an object using FastCDR serialization.
     * @param cdr FastCDR serialization object.
     */
    void deserialize(eprosima::fastcdr::FastCdr &cdr);
    
private:
    Header m_header;
    std::vector<std::string> m_joint_names;
    std::vector<JointTrajectoryPoint> m_points;
};

#endif // _JointTrajectory_H_